#!/usr/bin/env python3
"""
Bump version and release date.

The directory must be clean (no uncommitted changes) for the bump to occur. Tag 
is applied for minor and major release, but not patches.

usage:
    bump [options] major
    bump [options] minor
    bump [options] patch
    bump [options] initialize
    bump version

options:
    -h, --help      show this help message and exit
    -q, --quiet     run without narration
    -t, --trialrun  create new files rather than updating existing files
"""

from docopt import docopt
from inform import (
    display, fatal, Inform, os_error, render, terminate, warn, is_collection
)
from pathlib import Path
from shlib import rm, Run
from textwrap import dedent
from arrow import now
import re

__version__ = '1.9.0'
__released__ = '2021-01-27'

CFG_FILE = '.bump.cfg'
INITIAL_CFG_FILE_VALUES = dict(
    date_fmt = 'YYYY-MM-DD',
    major = 0,
    minor = 0,
    patch = 0,
    date = ['filename variablename'],
    version = ['filename variablename'],
)
INITIAL_CFG_FILE_CONTENTS = dedent("""
    date_fmt = {date_fmt!r}
    major = {major}
    minor = {minor}
    patch = {patch}
    date = {date!r}
    version = {version!r}
""").strip()
ASSIGNMENT_REGEX = r'''\b%s(\s*)([:=])(\s*)(['"]?)%s(['"]?)'''
DATE_REGEX = r'\d\d\d\d-\d\d-\d\d'
VERSION_REGEX = r'\d+\.\d+\.\d+'
NEW_EXTENSION = '.new'
REVISION_CONTROL_COMMANDS = {
    'git': {
        'status_command': "git status -s",
        'commit_command': [
            'git add .',
            "git commit -m 'bump version to {version}'",
        ],
        'tag_command': [
            "git tag -s v{version} -m 'bump version to {version}'",
            'git push origin v{version}'
        ],
    },
    'hg': {
        'status_command': "hg status -q",
        'commit_command': "hg commit -m 'bump version to {version}'",
        'tag_command': "hg tag v{version} -m 'bump version to {version}'",
    },
}

try:
    if Path('.git').exists():
        status_command = REVISION_CONTROL_COMMANDS['git']['status_command']
        commit_command = REVISION_CONTROL_COMMANDS['git']['commit_command']
        tag_command = REVISION_CONTROL_COMMANDS['git']['tag_command']
    elif Path('.hg').exists():
        status_command = REVISION_CONTROL_COMMANDS['hg']['status_command']
        commit_command = REVISION_CONTROL_COMMANDS['hg']['commit_command']
        tag_command = REVISION_CONTROL_COMMANDS['hg']['tag_command']
    else:
        status_command = None
        commit_command = []
        tag_command = []
        warn('unrecognized revision control system.')

    cmdline = docopt(__doc__)
    Inform(quiet = cmdline['--quiet'])
    extension = NEW_EXTENSION if cmdline['--trialrun'] else ''

    if cmdline['initialize']:
        Path(CFG_FILE + extension).write_text(
            INITIAL_CFG_FILE_CONTENTS.format(**INITIAL_CFG_FILE_VALUES)
        )
        terminate()

    code = Path(CFG_FILE).read_text()
    compiled = compile(code, CFG_FILE, 'exec')
    cfg = INITIAL_CFG_FILE_VALUES
    cfg['date'] = []
    cfg['version'] = []
    exec(compiled, cfg)

    date_fmt = cfg['date_fmt']
    date = cfg['date']
    version = cfg['version']
    current_version = '.'.join([
        str(cfg['major']),
        str(cfg['minor']),
        str(cfg['patch'])
    ])
    if cmdline['version']:
        print('{major}.{minor}.{patch}'.format(**cfg))
        terminate()

    if cmdline['major']:
        cfg['major'] += 1
        cfg['minor'] = 0
        cfg['patch'] = 0
        tag = '%s.%s' % (cfg['major'], cfg['minor'])
    elif cmdline['minor']:
        cfg['minor'] += 1
        cfg['patch'] = 0
        tag = '%s.%s' % (cfg['major'], cfg['minor'])
    elif cmdline['patch']:
        cfg['patch'] += 1
        tag = None
    else:
        raise NotImplementedError

    # check for a clean release
    if status_command:
        cmd = status_command.format()
        try:
            check = Run(cmd, 'sOeW')
        except OSError as e:
            fatal(e, 'when running:', cmd)
        clean = check.stdout.strip() == ''
        if cmdline['--trialrun']:
            display('clean' if clean else 'dirty', 'release.')
        if not clean:
            if cmdline['--trialrun']:
                warn('uncommitted files.')
            else:
                fatal('uncommitted files.')

    print('Updating to version %s.%s.%s' % (
        cfg['major'], cfg['minor'], cfg['patch']
    ))

    # update the date
    new_date = now().format(date_fmt)
    for pair in date:
        filename, varname = pair.split(None, 1)
        rm(filename + NEW_EXTENSION)
        contents = Path(filename).read_text()
        matcher = re.compile(ASSIGNMENT_REGEX % (varname, DATE_REGEX))
        new_assign = r'%s\1\2\3\g<4>%s\5' % (varname, new_date)
        new_contents = matcher.sub(new_assign, contents)
        if new_contents != contents:
            Path(filename + extension).write_text(new_contents)
            display('date updated.', culprit=filename)
        elif not cmdline['--quiet']:
            if not matcher.search(contents):
                warn('date assignment not found.', culprit=(filename, varname))

    # update the version
    new_version = '.'.join([
        str(cfg['major']),
        str(cfg['minor']),
        str(cfg['patch'])
    ])
    for pair in version:
        filename, varname = pair.split(None, 1)
        rm(filename + NEW_EXTENSION)
        contents = Path(filename).read_text()
        matcher = re.compile(ASSIGNMENT_REGEX % (varname, VERSION_REGEX))
        new_assign = r'%s\1\2\3\g<5>%s\5' % (varname, new_version)
        new_contents = matcher.sub(new_assign, contents)
        if new_contents != contents:
            Path(filename + extension).write_text(new_contents)
            display('version updated.', culprit=filename)
        elif not cmdline['--quiet']:
            if not matcher.search(contents):
                warn('version assignment not found.', culprit=(filename, varname))

    # update the config file
    entries = []
    for k, v in cfg.items():
        if k[0] != '_':
            entries.append(f'{k} = {render(v)}')
    content = '\n'.join(entries) + '\n'
    rm(CFG_FILE + NEW_EXTENSION)
    Path(CFG_FILE + extension).write_text(content)

    # commit the changes
    if not is_collection(commit_command):
        commit_command = [commit_command]
    for command in commit_command:
        cmd = command.format(version=new_version)
        if cmdline['--trialrun']:
            display(cmd)
        else:
            try:
                Run(cmd, 'soeW')
            except OSError as e:
                fatal(e, 'when running:', cmd)

    # tag the commit
    if tag:
        if not is_collection(tag_command):
            tag_command = [tag_command]
        for command in tag_command:
            cmd = command.format(version=tag)
            display('applying tag:', tag)
            if cmdline['--trialrun']:
                display(cmd)
            else:
                try:
                    Run(cmd, 'soeW')
                except OSError as e:
                    fatal(e, 'when running:', cmd)
except OSError as e:
    fatal(os_error(e))
