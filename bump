#!/usr/bin/env python3
"""
Bump version.

usage:
    bump [options] major
    bump [options] minor
    bump [options] patch
    bump [options] initialize
    bump version

options:
    -h, --help      show this help message and exit
    -q, --quiet     run without narration
    -t, --trialrun  create new files rather than updating existing files
"""

from docopt import docopt
from inform import display, fatal, Inform, os_error, terminate, warn
from pathlib import Path
from shlib import rm
from textwrap import dedent
from arrow import now
import re

__version__ = '1.6.1'
__released__ = '2016-12-09'

CFG_FILE = '.bump.cfg'
INITIAL_CFG_FILE_VALUES = {
    'date_fmt': 'YYYY-MM-DD',
    'major': 0,
    'minor': 0,
    'patch': 0,
    'date': ['filename variablename'],
    'version': ['filename variablename'],
}
INITIAL_CFG_FILE_CONTENTS = dedent("""
    date_fmt = {date_fmt!r}
    major = {major}
    minor = {minor}
    patch = {patch}
    date = {date!r}
    version = {version!r}
""").strip()
ASSIGNMENT_REGEX = r'''\b%s(\s*)([:=])(\s*)(['"]?)%s(['"]?)'''
DATE_REGEX = r'\d\d\d\d-\d\d-\d\d'
VERSION_REGEX = r'\d+\.\d+\.\d+'
NEW_EXTENSION = '.new'

try:
    cmdline = docopt(__doc__)
    Inform(quiet = cmdline['--quiet'])
    extension = NEW_EXTENSION if cmdline['--trialrun'] else ''

    if cmdline['initialize']:
        Path(CFG_FILE + extension).write_text(
            INITIAL_CFG_FILE_CONTENTS.format(**INITIAL_CFG_FILE_VALUES)
        )
        terminate()

    code = Path(CFG_FILE).read_text()
    compiled = compile(code, CFG_FILE, 'exec')
    cfg = INITIAL_CFG_FILE_VALUES
    cfg['date'] = []
    cfg['version'] = []
    exec(compiled, cfg)

    date_fmt = cfg['date_fmt']
    date = cfg['date']
    version = cfg['version']
    current_version = '.'.join([
        str(cfg['major']),
        str(cfg['minor']),
        str(cfg['patch'])
    ])
    if cmdline['version']:
        print('{major}.{minor}.{patch}'.format(**cfg))
        terminate()

    if cmdline['major']:
        cfg['major'] += 1
        cfg['minor'] = 0
        cfg['patch'] = 0
    elif cmdline['minor']:
        cfg['minor'] += 1
        cfg['patch'] = 0
    elif cmdline['patch']:
        cfg['patch'] += 1
    else:
        raise NotImplementedError
    print('Updating to version %s.%s.%s' % (
        cfg['major'], cfg['minor'], cfg['patch']
    ))

    # update the date
    new_date = now().format(date_fmt)
    for pair in date:
        filename, varname = pair.split(None, 1)
        rm(filename + NEW_EXTENSION)
        contents = Path(filename).read_text()
        matcher = re.compile(ASSIGNMENT_REGEX % (varname, DATE_REGEX))
        new_assign = r'%s\1\2\3\g<4>%s\5' % (varname, new_date)
        new_contents = matcher.sub(new_assign, contents)
        if new_contents != contents:
            Path(filename + extension).write_text(new_contents)
            display('date updated.', culprit=filename)
        elif not cmdline['--quiet']:
            if not matcher.search(contents):
                warn('assignment not found.', culprit=(filename, varname))

    # update the version
    new_version = '.'.join([
        str(cfg['major']),
        str(cfg['minor']),
        str(cfg['patch'])
    ])
    for pair in version:
        filename, varname = pair.split(None, 1)
        rm(filename + NEW_EXTENSION)
        contents = Path(filename).read_text()
        #matcher = re.compile(ASSIGNMENT_REGEX % (varname, re.escape(current_version)))
        matcher = re.compile(ASSIGNMENT_REGEX % (varname, VERSION_REGEX))
        new_assign = r'%s\1\2\3\g<5>%s\5' % (varname, new_version)
        new_contents = matcher.sub(new_assign, contents)
        if new_contents != contents:
            Path(filename + extension).write_text(new_contents)
            display('version updated.', culprit=filename)
        elif not cmdline['--quiet']:
            if not matcher.search(contents):
                warn('assignment not found.', culprit=(filename, varname))

    # update the config file
        rm(CFG_FILE + NEW_EXTENSION)
        Path(CFG_FILE + extension).write_text(
            INITIAL_CFG_FILE_CONTENTS.format(**cfg)
        )

except OSError as err:
    fatal(os_error(err))

# calculator.py:versionDate = '2016-05-25'
# calculator.py:        """ % (versionNumber, versionDate)))
# manpage.py:from calculator import versionDate, versionNumber
# manpage.py:    :Date: {date}
# manpage.py:        date=versionDate
